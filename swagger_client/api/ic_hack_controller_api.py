# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IcHackControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_new_user_id_using_post(self, _date, **kwargs):  # noqa: E501
        """createNewUserID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_user_id_using_post(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: date (required)
        :param str cred_def_id: credDefId
        :param file image: image
        :param str issuer_did: issuerDid
        :param str issuer_wallet_id: issuerWalletId
        :param str issuer_wallet_key: issuerWalletKey
        :param str name: name
        :param str prover_wallet_id: proverWalletId
        :param str prover_wallet_key: proverWalletKey
        :return: EmailInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_user_id_using_post_with_http_info(_date, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_user_id_using_post_with_http_info(_date, **kwargs)  # noqa: E501
            return data

    def create_new_user_id_using_post_with_http_info(self, _date, **kwargs):  # noqa: E501
        """createNewUserID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_user_id_using_post_with_http_info(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: date (required)
        :param str cred_def_id: credDefId
        :param file image: image
        :param str issuer_did: issuerDid
        :param str issuer_wallet_id: issuerWalletId
        :param str issuer_wallet_key: issuerWalletKey
        :param str name: name
        :param str prover_wallet_id: proverWalletId
        :param str prover_wallet_key: proverWalletKey
        :return: EmailInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'cred_def_id', 'image', 'issuer_did', 'issuer_wallet_id', 'issuer_wallet_key', 'name', 'prover_wallet_id', 'prover_wallet_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_user_id_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `create_new_user_id_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cred_def_id' in params:
            query_params.append(('credDefId', params['cred_def_id']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'issuer_did' in params:
            query_params.append(('issuerDid', params['issuer_did']))  # noqa: E501
        if 'issuer_wallet_id' in params:
            query_params.append(('issuerWalletId', params['issuer_wallet_id']))  # noqa: E501
        if 'issuer_wallet_key' in params:
            query_params.append(('issuerWalletKey', params['issuer_wallet_key']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'prover_wallet_id' in params:
            query_params.append(('proverWalletId', params['prover_wallet_id']))  # noqa: E501
        if 'prover_wallet_key' in params:
            query_params.append(('proverWalletKey', params['prover_wallet_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/createNewUser', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_new_user_wallet_using_post(self, _date, **kwargs):  # noqa: E501
        """createNewUserWallet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_user_wallet_using_post(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: date (required)
        :param str account_id: accountID
        :param file image: image
        :param str name: name
        :param str prover_wallet_id: proverWalletId
        :param str prover_wallet_key: proverWalletKey
        :return: EmailInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_user_wallet_using_post_with_http_info(_date, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_user_wallet_using_post_with_http_info(_date, **kwargs)  # noqa: E501
            return data

    def create_new_user_wallet_using_post_with_http_info(self, _date, **kwargs):  # noqa: E501
        """createNewUserWallet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_user_wallet_using_post_with_http_info(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: date (required)
        :param str account_id: accountID
        :param file image: image
        :param str name: name
        :param str prover_wallet_id: proverWalletId
        :param str prover_wallet_key: proverWalletKey
        :return: EmailInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'account_id', 'image', 'name', 'prover_wallet_id', 'prover_wallet_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_user_wallet_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `create_new_user_wallet_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountID', params['account_id']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'prover_wallet_id' in params:
            query_params.append(('proverWalletId', params['prover_wallet_id']))  # noqa: E501
        if 'prover_wallet_key' in params:
            query_params.append(('proverWalletKey', params['prover_wallet_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/create-wallet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_id_using_get(self, **kwargs):  # noqa: E501
        """getAccountID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_id_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: did
        :param str master_secret_id: masterSecretID
        :param str prover_wallet_id: proverWalletId
        :param str prover_wallet_key: proverWalletKey
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_id_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_account_id_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_account_id_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAccountID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_id_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: did
        :param str master_secret_id: masterSecretID
        :param str prover_wallet_id: proverWalletId
        :param str prover_wallet_key: proverWalletKey
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'master_secret_id', 'prover_wallet_id', 'prover_wallet_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'did' in params:
            query_params.append(('did', params['did']))  # noqa: E501
        if 'master_secret_id' in params:
            query_params.append(('masterSecretID', params['master_secret_id']))  # noqa: E501
        if 'prover_wallet_id' in params:
            query_params.append(('proverWalletId', params['prover_wallet_id']))  # noqa: E501
        if 'prover_wallet_key' in params:
            query_params.append(('proverWalletKey', params['prover_wallet_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/get-account-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file_using_get(self, **kwargs):  # noqa: E501
        """getFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_file_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_file_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_file_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getFile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpg'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def issue_ticket_using_post(self, **kwargs):  # noqa: E501
        """issueTicket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.issue_ticket_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: did
        :param str event: event
        :param str master_secret_id: masterSecretID
        :param str prover_wallet_id: proverWalletId
        :param str prover_wallet_key: proverWalletKey
        :param str seat: seat
        :return: EmailInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.issue_ticket_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.issue_ticket_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def issue_ticket_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """issueTicket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.issue_ticket_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did: did
        :param str event: event
        :param str master_secret_id: masterSecretID
        :param str prover_wallet_id: proverWalletId
        :param str prover_wallet_key: proverWalletKey
        :param str seat: seat
        :return: EmailInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'event', 'master_secret_id', 'prover_wallet_id', 'prover_wallet_key', 'seat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method issue_ticket_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'did' in params:
            query_params.append(('did', params['did']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'master_secret_id' in params:
            query_params.append(('masterSecretID', params['master_secret_id']))  # noqa: E501
        if 'prover_wallet_id' in params:
            query_params.append(('proverWalletId', params['prover_wallet_id']))  # noqa: E501
        if 'prover_wallet_key' in params:
            query_params.append(('proverWalletKey', params['prover_wallet_key']))  # noqa: E501
        if 'seat' in params:
            query_params.append(('seat', params['seat']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/issue-ticket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_proof_from_s3_using_get(self, **kwargs):  # noqa: E501
        """verifyProofFromS3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_proof_from_s3_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: bucketName
        :param str object_name: objectName
        :param str proof: proof
        :param str verifier_did: verifierDid
        :param str verifier_wallet_id: verifierWalletId
        :param str verifier_wallet_key: verifierWalletKey
        :return: ImageName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_proof_from_s3_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verify_proof_from_s3_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def verify_proof_from_s3_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """verifyProofFromS3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_proof_from_s3_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: bucketName
        :param str object_name: objectName
        :param str proof: proof
        :param str verifier_did: verifierDid
        :param str verifier_wallet_id: verifierWalletId
        :param str verifier_wallet_key: verifierWalletKey
        :return: ImageName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_name', 'object_name', 'proof', 'verifier_did', 'verifier_wallet_id', 'verifier_wallet_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_proof_from_s3_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bucket_name' in params:
            query_params.append(('bucketName', params['bucket_name']))  # noqa: E501
        if 'object_name' in params:
            query_params.append(('objectName', params['object_name']))  # noqa: E501
        if 'proof' in params:
            query_params.append(('proof', params['proof']))  # noqa: E501
        if 'verifier_did' in params:
            query_params.append(('verifierDid', params['verifier_did']))  # noqa: E501
        if 'verifier_wallet_id' in params:
            query_params.append(('verifierWalletId', params['verifier_wallet_id']))  # noqa: E501
        if 'verifier_wallet_key' in params:
            query_params.append(('verifierWalletKey', params['verifier_wallet_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpg'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/verify', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
