# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CredentialDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cred_def_id': 'str',
        'cred_def_json': 'str',
        'cred_defs': 'str'
    }

    attribute_map = {
        'cred_def_id': 'credDefId',
        'cred_def_json': 'credDefJson',
        'cred_defs': 'credDefs'
    }

    def __init__(self, cred_def_id=None, cred_def_json=None, cred_defs=None):  # noqa: E501
        """CredentialDefinition - a model defined in Swagger"""  # noqa: E501

        self._cred_def_id = None
        self._cred_def_json = None
        self._cred_defs = None
        self.discriminator = None

        if cred_def_id is not None:
            self.cred_def_id = cred_def_id
        if cred_def_json is not None:
            self.cred_def_json = cred_def_json
        if cred_defs is not None:
            self.cred_defs = cred_defs

    @property
    def cred_def_id(self):
        """Gets the cred_def_id of this CredentialDefinition.  # noqa: E501


        :return: The cred_def_id of this CredentialDefinition.  # noqa: E501
        :rtype: str
        """
        return self._cred_def_id

    @cred_def_id.setter
    def cred_def_id(self, cred_def_id):
        """Sets the cred_def_id of this CredentialDefinition.


        :param cred_def_id: The cred_def_id of this CredentialDefinition.  # noqa: E501
        :type: str
        """

        self._cred_def_id = cred_def_id

    @property
    def cred_def_json(self):
        """Gets the cred_def_json of this CredentialDefinition.  # noqa: E501


        :return: The cred_def_json of this CredentialDefinition.  # noqa: E501
        :rtype: str
        """
        return self._cred_def_json

    @cred_def_json.setter
    def cred_def_json(self, cred_def_json):
        """Sets the cred_def_json of this CredentialDefinition.


        :param cred_def_json: The cred_def_json of this CredentialDefinition.  # noqa: E501
        :type: str
        """

        self._cred_def_json = cred_def_json

    @property
    def cred_defs(self):
        """Gets the cred_defs of this CredentialDefinition.  # noqa: E501


        :return: The cred_defs of this CredentialDefinition.  # noqa: E501
        :rtype: str
        """
        return self._cred_defs

    @cred_defs.setter
    def cred_defs(self, cred_defs):
        """Sets the cred_defs of this CredentialDefinition.


        :param cred_defs: The cred_defs of this CredentialDefinition.  # noqa: E501
        :type: str
        """

        self._cred_defs = cred_defs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
